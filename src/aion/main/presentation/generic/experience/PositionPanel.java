/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package aion.main.presentation.generic.experience;

import aion.main.core.Experience;
import aion.main.core.environment.EnvironmentSchema;
import aion.main.core.environment.Position;
import aion.main.core.time.Sequence;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JButton;

/**
 *
 * @author Fanaen
 */
public class PositionPanel extends javax.swing.JPanel implements ActionListener, Experience.ExperienceListener, KeyListener
{
    // -- Attributes --
    private Experience experience;
    private Map<Position, JButton> map;
    private Map<JButton, Position> reverseMap;
    private GridBagLayout layout;
    
    private JButton currentButton = null;
    
    /**
     * Creates new form PositionPanel
     */
    PositionPanel(Experience experience)
    {
        initComponents();
        this.experience = experience;
        this.setBackground(new Color(220, 223, 228));
        
        EnvironmentSchema schema = experience.getEnvironmentSchema();
        schema.reset();
        Position position = schema.getNextItem(), firstPosition = null;
        map = new HashMap<>();
        reverseMap = new HashMap<>();
        
        
        Point min = new Point(0,0), max = new Point(0, 0), correction = new Point(0,0), pos;
        
        // -- Get differents positions --
        while(position != null)
        {
            JButton button = new JButton("");
            button.setFocusable(false);
            button.addActionListener(this);
            button.setBackground(Color.WHITE);
            position.update(button);
            
            if(firstPosition == null) firstPosition = position;
            
            pos = position.getPosition();
            min.x = Math.min(min.x, pos.x);
            min.y = Math.min(min.y, pos.y);
            max.x = Math.max(max.x, pos.x);
            max.y = Math.max(max.y, pos.y);
            
            map.put(position, button);
            reverseMap.put(button, position);
            position = schema.getNextItem();
        }
        
        Point plage = new Point(max.x - min.x, max.y - min.y);
                
        // -- Apply positions --
        correction.x = Math.min(min.x, 0);
        correction.y = Math.min(min.y, 0);
        
        layout = new GridBagLayout();
        setLayout(layout);
        
        for (Map.Entry<Position, JButton> entry : map.entrySet())
        {
            GridBagConstraints cst = new GridBagConstraints();
            pos = entry.getKey().getPosition();
            cst.gridx = pos.x - correction.x;
            cst.gridy = plage.y -(pos.y - correction.y);
            add(entry.getValue(), cst);
        }
        
        // Add the listener --
        experience.addListener(this);
        
        // -- Set the first button --
        setButton(map.get(firstPosition),firstPosition);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        System.out.println("POSITIONPANEL");        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        JButton button = (JButton) e.getSource();
        Position position = reverseMap.get(button);
        
        if(currentButton != button)
        {
            setButton(button, position);
        }
    }

    public void onSubjectStarted() { }
    public void onSubjectFinished() { }
    
    public void onSequenceStarted() {
        Collection<JButton> buttons = map.values();
        for (Iterator<JButton> it = buttons.iterator(); it.hasNext();) {
            JButton jButton = it.next();
            
            reverseMap.get(jButton).update(jButton);
        }
    }
    
    public void onSequenceFinished() { }
    public void onSequenceChronoStarted() { }
    
    public void onEstimatedUpdate(Sequence sequence, Position position) {
        JButton button = map.get(position);
        position.update(button);
    }

    public void onSequenceChronoFinished() { }
    public void onMove(long time, Position position) { }
    public void onExperienceFinished() { }

    private void setButton(JButton button, Position position) {
        if(currentButton != null ) currentButton.setBackground(Color.WHITE);
        button.setBackground(new Color(169, 255, 169));
        currentButton = button;

        experience.moveToPosition(position);
        position.update(button);
    }

    void moveToPosition(Position position) {
        JButton button = map.get(position);
        
        if(currentButton != button)
        {
            setButton(button, position);
        }
    }
    
    

    @Override
    public void keyTyped(KeyEvent e) {
        System.out.println("Key Typed");
    }

    @Override
    public void keyPressed(KeyEvent e) {
        System.out.println("Key Pressed");
    }

    @Override
    public void keyReleased(KeyEvent e) {
        System.out.println("Key Released");
    }
}
