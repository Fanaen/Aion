/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package aion.main.presentation.generic.treeview;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Fanaen
 */
public class GenericTreePanel extends javax.swing.JPanel {

    // -- Attributes --
    GenericTreeListener listener;
    String elementPluralName;
    private JPanel editPanel = new JPanel();
    private CardLayout cardLayout = new CardLayout();
    
    /**
     * Creates new form GenericTreePanel
     */
    public GenericTreePanel() {
        initComponents();   
        panelItem.setLayout(cardLayout);
        tree.addMouseListener(new PopClickListener());
    }
    
    public GenericTreePanel(GenericTreeListener listener, String elementPluralName) {
        this();
        
        this.listener = listener;
        
        // -- Setting the tree --
        tree.setTransferHandler(new TreeTransferHandler(listener)); 
        tree.getSelectionModel().setSelectionMode(  
                TreeSelectionModel.CONTIGUOUS_TREE_SELECTION);
        
        TreeModel treeModel = tree.getModel();
        treeModel.addTreeModelListener(new GenericTreeModelListener());
        
        // -- Setting the name --
        this.elementPluralName = elementPluralName;
        labelAddSubject.setText("Ajout des "+ elementPluralName);
    }
    
    public GenericTreePanel(GenericTreeListener listener, String elementPluralName, Object model) {
        this();
        this.listener = listener;
        
        // -- Setting the tree --
        tree.setTransferHandler(new TreeTransferHandler(listener)); 
        tree.getSelectionModel().setSelectionMode(  
                TreeSelectionModel.CONTIGUOUS_TREE_SELECTION);
        
        DefaultTreeModel treeModel = (DefaultTreeModel) model;
        treeModel.addTreeModelListener(new GenericTreeModelListener());
        tree.setModel(treeModel);
        
        // -- Setting the name --
        this.elementPluralName = elementPluralName;
        labelAddSubject.setText("Ajout des "+ elementPluralName);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        mainSplitPanel = new javax.swing.JSplitPane();
        panelTree = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        panelEdition = new javax.swing.JPanel();
        panelAddItem = new javax.swing.JPanel();
        labelAddSubject = new javax.swing.JLabel();
        textAddItem = new javax.swing.JTextField();
        buttonAddItem = new javax.swing.JButton();
        spinnerAddItem = new javax.swing.JSpinner();
        panelAddFolder = new javax.swing.JPanel();
        buttonAddFolder = new javax.swing.JButton();
        textAddFolder = new javax.swing.JTextField();
        labelAddFolder = new javax.swing.JLabel();
        spinnerAddFolder = new javax.swing.JSpinner();
        separatorAfterItem = new javax.swing.JSeparator();
        separatorAfterFolder = new javax.swing.JSeparator();
        panelItem = new javax.swing.JPanel();

        mainSplitPanel.setDividerLocation(250);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Racine");
        tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tree.setAutoscrolls(true);
        tree.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tree.setDoubleBuffered(true);
        tree.setDragEnabled(true);
        tree.setDropMode(javax.swing.DropMode.ON_OR_INSERT);
        tree.setEditable(true);
        tree.setPreferredSize(new java.awt.Dimension(150, 0));
        tree.setRootVisible(false);
        tree.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                treeMouseClicked(evt);
            }
        });
        tree.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                treeKeyReleased(evt);
            }
        });
        panelTree.setViewportView(tree);

        mainSplitPanel.setLeftComponent(panelTree);

        labelAddSubject.setText("Ajouter des éléments");

        buttonAddItem.setText("Ajouter");
        buttonAddItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonAddItemActionPerformed(evt);
            }
        });

        spinnerAddItem.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        javax.swing.GroupLayout panelAddItemLayout = new javax.swing.GroupLayout(panelAddItem);
        panelAddItem.setLayout(panelAddItemLayout);
        panelAddItemLayout.setHorizontalGroup(
            panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddItemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddItemLayout.createSequentialGroup()
                        .addComponent(labelAddSubject)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelAddItemLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelAddItemLayout.createSequentialGroup()
                                .addComponent(spinnerAddItem, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonAddItem))
                            .addComponent(textAddItem))))
                .addContainerGap())
        );
        panelAddItemLayout.setVerticalGroup(
            panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddItemLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(labelAddSubject)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textAddItem, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonAddItem)
                    .addComponent(spinnerAddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        buttonAddFolder.setText("Ajouter");
        buttonAddFolder.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                buttonAddFolderActionPerformed(evt);
            }
        });

        labelAddFolder.setText("Ajouter des dossiers");

        spinnerAddFolder.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        spinnerAddFolder.setToolTipText("");

        javax.swing.GroupLayout panelAddFolderLayout = new javax.swing.GroupLayout(panelAddFolder);
        panelAddFolder.setLayout(panelAddFolderLayout);
        panelAddFolderLayout.setHorizontalGroup(
            panelAddFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddFolderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAddFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddFolderLayout.createSequentialGroup()
                        .addComponent(labelAddFolder)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelAddFolderLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(panelAddFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelAddFolderLayout.createSequentialGroup()
                                .addComponent(spinnerAddFolder)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonAddFolder))
                            .addComponent(textAddFolder))))
                .addContainerGap())
        );
        panelAddFolderLayout.setVerticalGroup(
            panelAddFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddFolderLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(labelAddFolder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textAddFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelAddFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonAddFolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spinnerAddFolder))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout panelItemLayout = new javax.swing.GroupLayout(panelItem);
        panelItem.setLayout(panelItemLayout);
        panelItemLayout.setHorizontalGroup(
            panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 441, Short.MAX_VALUE)
        );
        panelItemLayout.setVerticalGroup(
            panelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 168, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelEditionLayout = new javax.swing.GroupLayout(panelEdition);
        panelEdition.setLayout(panelEditionLayout);
        panelEditionLayout.setHorizontalGroup(
            panelEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelAddItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelAddFolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelEditionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(separatorAfterFolder, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(separatorAfterItem, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addComponent(panelItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelEditionLayout.setVerticalGroup(
            panelEditionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEditionLayout.createSequentialGroup()
                .addComponent(panelAddItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(separatorAfterItem, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panelAddFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separatorAfterFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainSplitPanel.setRightComponent(panelEdition);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainSplitPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainSplitPanel)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 604, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(2, 2, 2)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(2, 2, 2)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(2, 2, 2)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(3, 3, 3)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddItemActionPerformed
        DefaultTreeModel model = (DefaultTreeModel) tree.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
        
        int value = (int) spinnerAddItem.getValue();
        for (int i = 0; i < value; i++)
        {
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(process(textAddItem), false);
            model.insertNodeInto(node, root, root.getChildCount());    
            if(listener != null) listener.onAddItem(node);
        }
        
        model.reload(root);
        spinnerAddItem.setValue(1);
    }//GEN-LAST:event_buttonAddItemActionPerformed

    private void buttonAddFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddFolderActionPerformed
        DefaultTreeModel model = (DefaultTreeModel) tree.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
        
        int value = (int) spinnerAddFolder.getValue();
        for (int i = 0; i < value; i++)
        {
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(process(textAddFolder), true);
            model.setAsksAllowsChildren(true);
            model.insertNodeInto(node, root, root.getChildCount());
            if(listener != null) listener.onAddFolder(node);
        }
            
        model.reload(root);
        spinnerAddFolder.setValue(1);
    }//GEN-LAST:event_buttonAddFolderActionPerformed

    private void treeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeMouseClicked
        TreePath tp = tree.getPathForLocation(evt.getX(), evt.getY());
        if (tp != null) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) tp.getLastPathComponent();
            
            if(node != null) {
                if(node.getAllowsChildren()){
                    listener.onSelectFolder(node);
                }
                else {
                    listener.onSelectItem(node);
                }
            }
        }
    }//GEN-LAST:event_treeMouseClicked

    private void treeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_treeKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_treeKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddFolder;
    private javax.swing.JButton buttonAddItem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelAddFolder;
    private javax.swing.JLabel labelAddSubject;
    private javax.swing.JSplitPane mainSplitPanel;
    private javax.swing.JPanel panelAddFolder;
    private javax.swing.JPanel panelAddItem;
    private javax.swing.JPanel panelEdition;
    private javax.swing.JPanel panelItem;
    private javax.swing.JScrollPane panelTree;
    private javax.swing.JSeparator separatorAfterFolder;
    private javax.swing.JSeparator separatorAfterItem;
    private javax.swing.JSpinner spinnerAddFolder;
    private javax.swing.JSpinner spinnerAddItem;
    private javax.swing.JTextField textAddFolder;
    private javax.swing.JTextField textAddItem;
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables

    // -- Methods --
    public void setEditPanel(JPanel panel) {
        panelItem.removeAll();
        panelItem.add(panel, "");
        cardLayout.last(panelItem);
    }

    public void removeNode(DefaultMutableTreeNode node)
    {
        DefaultTreeModel model = (DefaultTreeModel) tree.getModel();
        model.removeNodeFromParent(node);
    }
    
    public static int toInt(String str) {
        try {  
            return Integer.parseInt(str);  
        }  
        catch(NumberFormatException nfe) {  
            return -1;  
        } 
    }

    private String process(JTextField text)
    {
        final char minStart = 'a', minEnd = 'z', majStart = 'A', majEnd = 'Z';
        
        Pattern p = Pattern.compile("<([a-zA-Z]|\\-?[0-9]+):?(\\-?[0-9]+)?>");
        String str = text.getText();
        String ori = text.getText();
        
        Matcher m = p.matcher(str);
        
        while (m.find()) {
            String num = m.group(1);
            String inc = m.group(2);
            int i = 0, j = 1;
            boolean numeric = true;
            
            // -- Numeric conversion --
            try {  
                i = Integer.parseInt(num);  
            }  
            catch(NumberFormatException nfe) { 
                numeric = false;
            }
            try {  
                j = Integer.parseInt(inc);  
            }  
            catch(NumberFormatException nfe) { }
            if(j == 0) j = 1;
            
            if(numeric) { // Numeric --
                str = str.replaceFirst(m.group(0), "" + i);
                num = "" + (i+j);
            }
            else { // Letters --
                int k = num.length() - 1;
                char car = num.charAt(0);
                str = str.replaceFirst(m.group(0), "" + car); // Apply current car
                
                if(car >= minStart && car <= minEnd) { // -- Minuscule --
                    if(j > 0) { // Increase --
                        car = (char) Math.min(car + j, minEnd);
                    }
                    else { // Decrease --
                        car = (char) Math.max(car + j, minStart);
                    }
                }
                else if(car >= majStart && car <= majEnd) { // -- Majuscule --
                    if(j > 0) { // Increase --
                        car = (char) Math.min(car + j, majEnd);
                    }
                    else { // Decrease --
                        car = (char) Math.max(car + j, majStart);
                    }
                }
                
                num = String.valueOf(car); // Prepare next car
            }
            
            if(j == 1) { // Standard increment --
                ori = ori.replaceFirst(m.group(0), "<" + num + ">");
            }
            else {
                ori = ori.replaceFirst(m.group(0), "<" + num + ":" + j + ">");
            }
            
            // -- Next Element --
            m = p.matcher(str);
        }
        
        text.setText(ori);
        return str;
    }
    
    // -- Listeners --
    class GenericTreeModelListener implements TreeModelListener {

        @Override
        public void treeNodesChanged(TreeModelEvent e) {
            DefaultMutableTreeNode node;
            node = (DefaultMutableTreeNode)
                     (e.getTreePath().getLastPathComponent());

            /*
             * If the event lists children, then the changed
             * node is the child of the node we have already
             * gotten.  Otherwise, the changed node and the
             * specified node are the same.
             */
            try {
                int index = e.getChildIndices()[0];
                node = (DefaultMutableTreeNode)
                       (node.getChildAt(index));
                
                listener.onRenameItem(node);
            
            } catch (NullPointerException exc) {
                Logger.getLogger("MyLog").log(Level.SEVERE, null, exc);
            }
        }

        @Override
        public void treeNodesInserted(TreeModelEvent e) {
        }

        @Override
        public void treeNodesRemoved(TreeModelEvent e) {
        }

        @Override
        public void treeStructureChanged(TreeModelEvent e) {
        }
    }
    
    
    class Popup extends JPopupMenu {
        JMenuItem removeItem;
        public Popup(){
            removeItem = new JMenuItem("Supprimer");
            removeItem.addMouseListener(new MouseListener() {

                @Override
                public void mouseClicked(MouseEvent me) { }

                public void mousePressed(MouseEvent me) { }
                public void mouseReleased(MouseEvent me) { 
                    for (TreePath path : tree.getSelectionPaths()) {
                        DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
                        listener.onRemoveItem(node);
                        removeNode(node);
                    }
                }
                public void mouseEntered(MouseEvent me) { }
                public void mouseExited(MouseEvent me) { }
            });
            add(removeItem);
        }
    }
    
    class PopClickListener extends MouseAdapter {
        public void mousePressed(MouseEvent e){
            if (e.isPopupTrigger())
                doPop(e);
        }

        public void mouseReleased(MouseEvent e){
            if (e.isPopupTrigger())
                doPop(e);
        }

        private void doPop(MouseEvent e){
            Popup menu = new Popup();
            menu.show(e.getComponent(), e.getX(), e.getY());
        }
    }
}
