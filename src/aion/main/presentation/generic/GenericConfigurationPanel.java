/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package aion.main.presentation.generic;

import aion.main.core.Experience;
import aion.main.core.environment.Position;
import aion.main.core.subject.Subject;
import aion.main.core.time.AbstractSequence;
import aion.main.core.time.Sequence;
import aion.main.core.time.SequenceList;
import aion.main.presentation.MainView;
import aion.main.presentation.generic.config.environment.EnvironmentConfigModule;
import aion.main.presentation.generic.config.subject.SubjectConfigModule;
import aion.main.presentation.generic.config.time.TimeConfigModule;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Fanaen
 */
public class GenericConfigurationPanel extends BuilderPanel
{
    // -- Attributes --
    private TimeConfigModule timeModule;
    private SubjectConfigModule subjectModule;
    private EnvironmentConfigModule environmentModule;
    

    /**
     * Creates new form GenericConfigurationPanel
     */
    public GenericConfigurationPanel()
    {
        initComponents();
        
        setTimeModule();
        setSubjectModule();
        setEnvironmentModule();
    }
    
    public void setTimeModule() {
        timeModule = new TimeConfigModule();
        mainTabbedPane1.addTab("Découpage temporel par individu", timeModule.getTab());
    }
    
    public void setSubjectModule() {
        subjectModule = new SubjectConfigModule();
        mainTabbedPane1.addTab("Liste des sujets", subjectModule.getTab());
    }
    
    public void setEnvironmentModule() {
        environmentModule = new EnvironmentConfigModule();
        mainTabbedPane1.addTab("Positions possibles", environmentModule.getTab());
    }
    
    private void printTimeSchema(List<AbstractSequence> list, String level) {
        for(AbstractSequence sequence : list) {
            System.out.print(level + sequence);
            System.out.println(" " + sequence.getName());
            
            if(sequence instanceof SequenceList) {
                printTimeSchema( ((SequenceList)sequence).getList(), level + " | ");
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        mainTabbedPane1 = new javax.swing.JTabbedPane();

        mainTabbedPane1.setDoubleBuffered(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane mainTabbedPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onNext()
    {
        printTimeSchema(timeModule.schema.getList(), "Print : ");
        Experience experience = new Experience();
        experience.setTimeSchema(timeModule.schema);
        experience.setEnvironmentSchema(environmentModule.schema);
        experience.setSubjectSchema(subjectModule.schema);
        
        // -- Item numbering --
        int i = 1;
        for (Iterator<Position> it = experience.getPositions().iterator(); it.hasNext();) {
            Position position = it.next();
            position.setNumber(i);
            i++;
        }
        
        if(!test(i, "Position")) return;
        
        i = 1;
        for (Iterator<Subject> it = experience.getSubjects().iterator(); it.hasNext();) {
            Subject subject = it.next();
            subject.setNumber(i);
            i++;
        }
        
        if(!test(i, "Sujet")) return;
        
        i = 1;
        for (Iterator<Sequence> it = experience.getSequences().iterator(); it.hasNext();) {
            Sequence sequence = it.next();
            sequence.setNumber(i);
            i++;
        }
        
        if(!test(i, "Sequence")) return;
        
        // -- Next step --
        ExperienceSavePanel panel = new ExperienceSavePanel(experience);
        nextPanel(panel);
    }
    
    public boolean test(int i, String type)
    {
        if(i == 1) 
        {
            Logger.getLogger("MyLog").log(Level.INFO, "Aucun élément de type "+ type );
            (new JOptionPane()).showMessageDialog(null, 
                        "Vous n'avez créé aucun élément de type "+ type +".", 
                        "Aucun élément de type "+ type +".", 
                        JOptionPane.ERROR_MESSAGE);
            return false;
        }
        else
        {
            return true;
        }
    }
}
