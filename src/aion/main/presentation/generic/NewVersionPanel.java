/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package aion.main.presentation.generic;

import aion.main.core.Experience;
import aion.main.core.time.AbstractSequence;
import aion.main.core.time.Sequence;
import aion.main.core.time.SequenceList;
import aion.main.core.time.TimeSchema;
import aion.main.presentation.generic.config.time.TimeConfigModule;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Fanaen
 */
public class NewVersionPanel extends BuilderPanel {

    // -- Attributes --
    private Experience experience;
    private TimeConfigModule timeModule;
    
    /**
     * Creates new form NewVersionPanel
     */
    public NewVersionPanel(Experience experience) {
        initComponents();
        this.experience = experience;
        
        // -- Prepare objects --
        TimeSchema schema = experience.getTimeSchema();
        DefaultMutableTreeNode root = new DefaultMutableTreeNode();
        DefaultTreeModel model = new DefaultTreeModel(root);
        model.setAsksAllowsChildren(true);
        
        // -- Process list --
        List<AbstractSequence> list = schema.getList();
        parseSchema(list, root);
        schema.setList(list);
        
        // -- Initialise GUI --
        timeModule = new TimeConfigModule(schema, model);
        mainTabbedPane1.addTab("Découpage temporel par individu", timeModule.getTab());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nameTextBox = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        mainTabbedPane1.setDoubleBuffered(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Nom de la version");

        nameTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextBoxActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(204, 0, 51));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Veuillez ne pas mettre de caractères spéciaux.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(nameTextBox))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(196, Short.MAX_VALUE))
        );

        mainTabbedPane1.addTab("Général", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nameTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTextBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane mainTabbedPane1;
    private javax.swing.JTextField nameTextBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onNext() {
        
        if(nameTextBox.getText().matches("^[a-zA-Z0-9 ]+$")) { // Valid text --
            
            experience.setVersion(nameTextBox.getText());
            saveNewVersion();
            
            DataSetListPanel panel = new DataSetListPanel(experience);
            nextPanel(panel);
        }
        else {
            (new JOptionPane()).showMessageDialog(null, 
                    "Veuillez ne pas mettre de caractères spéciaux dans les noms.", 
                    "Nom incorrect", 
                    JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    private void saveNewVersion() {
        try {
            String path = "Data/" + experience.getName(); 
            FileOutputStream fichier = new FileOutputStream(path+"/"+ experience.getVersion() +".ser");
            ObjectOutputStream oos = new ObjectOutputStream(fichier);
            oos.writeObject(experience);
            oos.flush();
            oos.close();
        }
        catch (java.io.IOException ex) {
             Logger.getLogger("MyLog").log(Level.SEVERE, null, ex);
        }
    }

    private void parseSchema(List<AbstractSequence> list, DefaultMutableTreeNode root) {
        int i = 0;
        for (Iterator<AbstractSequence> it = list.iterator(); it.hasNext();) {
            AbstractSequence abstractSequence = it.next();                
            
            if(abstractSequence instanceof Sequence) { // Item -> Folder --
                Sequence item = (Sequence) abstractSequence;
                
                // Get lenght --
                int nbSecond = item.getNbSecond();
                String name = item.getName();
                String time = "(" + (int) (nbSecond / 60) + "min " + (nbSecond % 60) +")";
                
                // Switch Sequence into SequenceList --
                SequenceList sequenceList = new SequenceList(name);
                list.set(i, sequenceList);
                
                // Add node into tree --
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(name + " " + time, true);
                root.add(node);
            }
            else if (abstractSequence instanceof SequenceList){ // Folder -> Folder + Recursive --
                SequenceList item = (SequenceList) abstractSequence;
                
                // Add node into tree --
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(item.getName(), true);
                root.add(node);
                
                // Recursive call --
                parseSchema(item.getList(), node);
            }
            
            i++;
        }
    }
}
